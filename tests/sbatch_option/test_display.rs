use rstest::rstest;
use sbatch_rs::SbatchOption;

#[rstest]
#[case(SbatchOption::Account("test".to_string()), "--account=test")]
#[case(SbatchOption::AcctgFreq("test".to_string()), "--acctg-freq=test")]
#[case(SbatchOption::Array("test".to_string()), "--array=test")]
#[case(SbatchOption::Batch("test".to_string()), "--batch=test")]
#[case(SbatchOption::Bb("test".to_string()), "--bb=test")]
#[case(SbatchOption::Bbf("test".to_string()), "--bbf=test")]
#[case(SbatchOption::Begin("test".to_string()), "--begin=test")]
#[case(SbatchOption::Chdir("test".to_string()), "--chdir=test")]
#[case(SbatchOption::ClusterConstraint("test".to_string()), "--cluster-constraint=test")]
#[case(SbatchOption::Clusters("test".to_string()), "--clusters=test")]
#[case(SbatchOption::Comment("test".to_string()), "--comment=test")]
#[case(SbatchOption::Constraint("test".to_string()), "--constraint=test")]
#[case(SbatchOption::Container("test".to_string()), "--container=test")]
#[case(SbatchOption::ContainerID("test".to_string()), "--container-id=test")]
#[case(SbatchOption::Contiguous, "--contiguous")]
#[case(SbatchOption::CoreSpec("test".to_string()), "--core-spec=test")]
#[case(SbatchOption::CoresPerSocket("test".to_string()), "--cores-per-socket=test")]
#[case(SbatchOption::CPUFreq("test".to_string()), "--cpu-freq=test")]
#[case(SbatchOption::CPUsPerGPU("test".to_string()), "--cpus-per-gpu=test")]
#[case(SbatchOption::CPUsPerTask("test".to_string()), "--cpus-per-task=test")]
#[case(SbatchOption::Deadline("test".to_string()), "--deadline=test")]
#[case(SbatchOption::DelayBoot("test".to_string()), "--delay-boot=test")]
#[case(SbatchOption::Dependency("test".to_string()), "--dependency=test")]
#[case(SbatchOption::Distribution("test".to_string()), "--distribution=test")]
#[case(SbatchOption::Error("test".to_string()), "--error=test")]
#[case(SbatchOption::Exclude("test".to_string()), "--exclude=test")]
#[case(SbatchOption::Exclusive(Some("test".to_string())), "--exclusive=test")]
#[case(SbatchOption::Exclusive(None), "--exclusive")]
#[case(SbatchOption::Export("test".to_string()), "--export=test")]
#[case(SbatchOption::ExportFile("test".to_string()), "--export-file=test")]
#[case(SbatchOption::Extra("test".to_string()), "--extra=test")]
#[case(SbatchOption::ExtraNodeInfo("test".to_string()), "--extra-node-info=test")]
#[case(SbatchOption::GetUserEnv(Some("test".to_string())), "--get-user-env=test")]
#[case(SbatchOption::GetUserEnv(None), "--get-user-env")]
#[case(SbatchOption::GID("test".to_string()), "--gid=test")]
#[case(SbatchOption::GPUBind("test".to_string()), "--gpu-bind=test")]
#[case(SbatchOption::GPUFreq("test".to_string()), "--gpu-freq=test")]
#[case(SbatchOption::GPUs("test".to_string()), "--gpus=test")]
#[case(SbatchOption::GPUsPerNode("test".to_string()), "--gpus-per-node=test")]
#[case(SbatchOption::GPUsPerSocket("test".to_string()), "--gpus-per-socket=test")]
#[case(SbatchOption::GPUsPerTask("test".to_string()), "--gpus-per-task=test")]
#[case(SbatchOption::Gres("test".to_string()), "--gres=test")]
#[case(SbatchOption::GresFlags("test".to_string()), "--gres-flags=test")]
#[case(SbatchOption::Help, "--help")]
#[case(SbatchOption::Hint("test".to_string()), "--hint=test")]
#[case(SbatchOption::Hold, "--hold")]
#[case(SbatchOption::IgnorePbs, "--ignore-pbs")]
#[case(SbatchOption::Input("test".to_string()), "--input=test")]
#[case(SbatchOption::JobName("test".to_string()), "--job-name=test")]
#[case(SbatchOption::KillOnInvalidDep("test".to_string()), "--kill-on-invalid-dep=test")]
#[case(SbatchOption::Licenses("test".to_string()), "--licenses=test")]
#[case(SbatchOption::MailType("test".to_string()), "--mail-type=test")]
#[case(SbatchOption::MailUser("test".to_string()), "--mail-user=test")]
#[case(SbatchOption::McsLabel("test".to_string()), "--mcs-label=test")]
#[case(SbatchOption::Mem("test".to_string()), "--mem=test")]
#[case(SbatchOption::MemBind("test".to_string()), "--mem-bind=test")]
#[case(SbatchOption::MemPerCPU("test".to_string()), "--mem-per-cpu=test")]
#[case(SbatchOption::MemPerGPU("test".to_string()), "--mem-per-gpu=test")]
#[case(SbatchOption::MinCPUs("test".to_string()), "--min-cpus=test")]
#[case(SbatchOption::Network("test".to_string()), "--network=test")]
#[case(SbatchOption::Nice(Some("test".to_string())), "--nice=test")]
#[case(SbatchOption::Nice(None), "--nice")]
#[case(SbatchOption::NoKill(Some("test".to_string())), "--no-kill=test")]
#[case(SbatchOption::NoKill(None), "--no-kill")]
#[case(SbatchOption::NoRequeue, "--no-requeue")]
#[case(SbatchOption::NodeFile("test".to_string()), "--nodefile=test")]
#[case(SbatchOption::NodeList("test".to_string()), "--nodelist=test")]
#[case(SbatchOption::Nodes("test".to_string()), "--nodes=test")]
#[case(SbatchOption::NTasks("test".to_string()), "--ntasks=test")]
#[case(SbatchOption::NTasksPerCore("test".to_string()), "--ntasks-per-core=test")]
#[case(SbatchOption::NTasksPerGPU("test".to_string()), "--ntasks-per-gpu=test")]
#[case(SbatchOption::NTasksPerNode("test".to_string()), "--ntasks-per-node=test")]
#[case(SbatchOption::NTasksPerSocket("test".to_string()), "--ntasks-per-socket=test")]
#[case(SbatchOption::OOMKillStep(Some("test".to_string())), "--oom-kill-step=test")]
#[case(SbatchOption::OOMKillStep(None), "--oom-kill-step")]
#[case(SbatchOption::OpenMode("test".to_string()), "--open-mode=test")]
#[case(SbatchOption::Output("test".to_string()), "--output=test")]
#[case(SbatchOption::Overcommit, "--overcommit")]
#[case(SbatchOption::Oversubscribe, "--oversubscribe")]
#[case(SbatchOption::Parsable, "--parsable")]
#[case(SbatchOption::Partition("test".to_string()), "--partition=test")]
#[case(SbatchOption::Prefer("test".to_string()), "--prefer=test")]
#[case(SbatchOption::Priority("test".to_string()), "--priority=test")]
#[case(SbatchOption::Profile("test".to_string()), "--profile=test")]
#[case(SbatchOption::Propagate(Some("test".to_string())), "--propagate=test")]
#[case(SbatchOption::Propagate(None), "--propagate")]
#[case(SbatchOption::Qos("test".to_string()), "--qos=test")]
#[case(SbatchOption::Quiet, "--quiet")]
#[case(SbatchOption::Reboot, "--reboot")]
#[case(SbatchOption::Requeue, "--requeue")]
#[case(SbatchOption::Reservation("test".to_string()), "--reservation=test")]
#[case(SbatchOption::ResvPorts(Some("test".to_string())), "--resv-ports=test")]
#[case(SbatchOption::ResvPorts(None), "--resv-ports")]
#[case(SbatchOption::Segment("test".to_string()), "--segment=test")]
#[case(SbatchOption::Signal("test".to_string()), "--signal=test")]
#[case(SbatchOption::SocketsPerNode("test".to_string()), "--sockets-per-node=test")]
#[case(SbatchOption::SpreadJob, "--spread-job")]
#[case(SbatchOption::Stepmgr, "--stepmgr")]
#[case(SbatchOption::Switches("test".to_string()), "--switches=test")]
#[case(SbatchOption::TestOnly, "--test-only")]
#[case(SbatchOption::ThreadSpec("test".to_string()), "--thread-spec=test")]
#[case(SbatchOption::ThreadsPerCore("test".to_string()), "--threads-per-core=test")]
#[case(SbatchOption::Time("test".to_string()), "--time=test")]
#[case(SbatchOption::TimeMin("test".to_string()), "--time-min=test")]
#[case(SbatchOption::Tmp("test".to_string()), "--tmp=test")]
#[case(SbatchOption::TresBind("test".to_string()), "--tres-bind=test")]
#[case(SbatchOption::TresPerTask("test".to_string()), "--tres-per-task=test")]
#[case(SbatchOption::UID("test".to_string()), "--uid=test")]
#[case(SbatchOption::Usage, "--usage")]
#[case(SbatchOption::UseMinNodes, "--use-min-nodes")]
#[case(SbatchOption::Verbose, "--verbose")]
#[case(SbatchOption::Version, "--version")]
#[case(SbatchOption::Wait, "--wait")]
#[case(SbatchOption::WaitAllNodes("test".to_string()), "--wait-all-nodes=test")]
#[case(SbatchOption::WCKey("test".to_string()), "--wckey=test")]
#[case(SbatchOption::Wrap("test".to_string()), r#"--wrap="test""#)]
fn test_sbatch_option_to_string(#[case] option: SbatchOption, #[case] expected: &str) {
    assert_eq!(option.to_string(), expected);
}
