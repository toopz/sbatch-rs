use rstest::rstest;
use sbatch_rs::SbatchOption;

#[rstest]
#[case(SbatchOption::Account("test".to_string()))]
#[case(SbatchOption::AcctgFreq("test".to_string()))]
#[case(SbatchOption::Array("test".to_string()))]
#[case(SbatchOption::Batch("test".to_string()))]
#[case(SbatchOption::Bb("test".to_string()))]
#[case(SbatchOption::Bbf("test".to_string()))]
#[case(SbatchOption::Begin("test".to_string()))]
#[case(SbatchOption::Chdir("test".to_string()))]
#[case(SbatchOption::ClusterConstraint("test".to_string()))]
#[case(SbatchOption::Clusters("test".to_string()))]
#[case(SbatchOption::Comment("test".to_string()))]
#[case(SbatchOption::Constraint("test".to_string()))]
#[case(SbatchOption::Container("test".to_string()))]
#[case(SbatchOption::ContainerID("test".to_string()))]
#[case(SbatchOption::Contiguous)]
#[case(SbatchOption::CoreSpec("test".to_string()))]
#[case(SbatchOption::CoresPerSocket("test".to_string()))]
#[case(SbatchOption::CPUFreq("test".to_string()))]
#[case(SbatchOption::CPUsPerGPU("test".to_string()))]
#[case(SbatchOption::CPUsPerTask("test".to_string()))]
#[case(SbatchOption::Deadline("test".to_string()))]
#[case(SbatchOption::DelayBoot("test".to_string()))]
#[case(SbatchOption::Dependency("test".to_string()))]
#[case(SbatchOption::Distribution("test".to_string()))]
#[case(SbatchOption::Error("test".to_string()))]
#[case(SbatchOption::Exclude("test".to_string()))]
#[case(SbatchOption::Exclusive(Some("test".to_string())))]
#[case(SbatchOption::Exclusive(None))]
#[case(SbatchOption::Export("test".to_string()))]
#[case(SbatchOption::ExportFile("test".to_string()))]
#[case(SbatchOption::Extra("test".to_string()))]
#[case(SbatchOption::ExtraNodeInfo("test".to_string()))]
#[case(SbatchOption::GetUserEnv(Some("test".to_string())))]
#[case(SbatchOption::GetUserEnv(None))]
#[case(SbatchOption::GID("test".to_string()))]
#[case(SbatchOption::GPUBind("test".to_string()))]
#[case(SbatchOption::GPUFreq("test".to_string()))]
#[case(SbatchOption::GPUs("test".to_string()))]
#[case(SbatchOption::GPUsPerNode("test".to_string()))]
#[case(SbatchOption::GPUsPerSocket("test".to_string()))]
#[case(SbatchOption::GPUsPerTask("test".to_string()))]
#[case(SbatchOption::Gres("test".to_string()))]
#[case(SbatchOption::GresFlags("test".to_string()))]
#[case(SbatchOption::Help)]
#[case(SbatchOption::Hint("test".to_string()))]
#[case(SbatchOption::Hold)]
#[case(SbatchOption::IgnorePbs)]
#[case(SbatchOption::Input("test".to_string()))]
#[case(SbatchOption::JobName("test".to_string()))]
#[case(SbatchOption::KillOnInvalidDep("test".to_string()))]
#[case(SbatchOption::Licenses("test".to_string()))]
#[case(SbatchOption::MailType("test".to_string()))]
#[case(SbatchOption::MailUser("test".to_string()))]
#[case(SbatchOption::McsLabel("test".to_string()))]
#[case(SbatchOption::Mem("test".to_string()))]
#[case(SbatchOption::MemBind("test".to_string()))]
#[case(SbatchOption::MemPerCPU("test".to_string()))]
#[case(SbatchOption::MemPerGPU("test".to_string()))]
#[case(SbatchOption::MinCPUs("test".to_string()))]
#[case(SbatchOption::Network("test".to_string()))]
#[case(SbatchOption::Nice(Some("test".to_string())))]
#[case(SbatchOption::Nice(None))]
#[case(SbatchOption::NoKill(Some("test".to_string())))]
#[case(SbatchOption::NoKill(None))]
#[case(SbatchOption::NoRequeue)]
#[case(SbatchOption::NodeFile("test".to_string()))]
#[case(SbatchOption::NodeList("test".to_string()))]
#[case(SbatchOption::Nodes("test".to_string()))]
#[case(SbatchOption::NTasks("test".to_string()))]
#[case(SbatchOption::NTasksPerCore("test".to_string()))]
#[case(SbatchOption::NTasksPerGPU("test".to_string()))]
#[case(SbatchOption::NTasksPerNode("test".to_string()))]
#[case(SbatchOption::NTasksPerSocket("test".to_string()))]
#[case(SbatchOption::OOMKillStep(Some("test".to_string())))]
#[case(SbatchOption::OOMKillStep(None))]
#[case(SbatchOption::OpenMode("test".to_string()))]
#[case(SbatchOption::Output("test".to_string()))]
#[case(SbatchOption::Overcommit)]
#[case(SbatchOption::Oversubscribe)]
#[case(SbatchOption::Parsable)]
#[case(SbatchOption::Partition("test".to_string()))]
#[case(SbatchOption::Prefer("test".to_string()))]
#[case(SbatchOption::Priority("test".to_string()))]
#[case(SbatchOption::Profile("test".to_string()))]
#[case(SbatchOption::Propagate(Some("test".to_string())))]
#[case(SbatchOption::Propagate(None))]
#[case(SbatchOption::Qos("test".to_string()))]
#[case(SbatchOption::Quiet)]
#[case(SbatchOption::Reboot)]
#[case(SbatchOption::Requeue)]
#[case(SbatchOption::Reservation("test".to_string()))]
#[case(SbatchOption::ResvPorts(Some("test".to_string())))]
#[case(SbatchOption::ResvPorts(None))]
#[case(SbatchOption::Segment("test".to_string()))]
#[case(SbatchOption::Signal("test".to_string()))]
#[case(SbatchOption::SocketsPerNode("test".to_string()))]
#[case(SbatchOption::SpreadJob)]
#[case(SbatchOption::Stepmgr)]
#[case(SbatchOption::Switches("test".to_string()))]
#[case(SbatchOption::TestOnly)]
#[case(SbatchOption::ThreadSpec("test".to_string()))]
#[case(SbatchOption::ThreadsPerCore("test".to_string()))]
#[case(SbatchOption::Time("test".to_string()))]
#[case(SbatchOption::TimeMin("test".to_string()))]
#[case(SbatchOption::Tmp("test".to_string()))]
#[case(SbatchOption::TresBind("test".to_string()))]
#[case(SbatchOption::TresPerTask("test".to_string()))]
#[case(SbatchOption::UID("test".to_string()))]
#[case(SbatchOption::Usage)]
#[case(SbatchOption::UseMinNodes)]
#[case(SbatchOption::Verbose)]
#[case(SbatchOption::Version)]
#[case(SbatchOption::Wait)]
#[case(SbatchOption::WaitAllNodes("test".to_string()))]
#[case(SbatchOption::WCKey("test".to_string()))]
#[case(SbatchOption::Wrap("test".to_string()))]
fn test_sbatch_option_validate(#[case] option: SbatchOption) {
    assert!(option.validate().is_ok());
}

#[rstest]
#[case(SbatchOption::Account("".to_string()))]
#[case(SbatchOption::Account(" ".to_string()))]
#[case(SbatchOption::Account("  ".to_string()))]
#[case(SbatchOption::Account("test  ".to_string()))]
#[case(SbatchOption::Account("  test".to_string()))]
#[case(SbatchOption::Account("  test  ".to_string()))]
#[case(SbatchOption::Nice(Some("".to_string())))]
#[case(SbatchOption::Nice(Some(" ".to_string())))]
#[case(SbatchOption::Nice(Some("  ".to_string())))]
#[case(SbatchOption::Nice(Some("  test".to_string())))]
#[case(SbatchOption::Nice(Some("test  ".to_string())))]
#[case(SbatchOption::Nice(Some("  test  ".to_string())))]
fn test_sbatch_option_validate_error(#[case] option: SbatchOption) {
    assert!(option.validate().is_err());
}
