use rstest::rstest;
pub use sbatch_rs::DependencyType;

#[rstest]
#[case(DependencyType::After("123".to_string()))]
#[case(DependencyType::AfterTimeDelay("123".to_string(), "10".to_string()))]
#[case(DependencyType::AfterAny("123".to_string()))]
#[case(DependencyType::AfterBurstBuffer("123".to_string()))]
#[case(DependencyType::AfterCorr("123".to_string()))]
#[case(DependencyType::AfterNotOk("123".to_string()))]
#[case(DependencyType::AfterOk("123".to_string()))]
#[case(DependencyType::Singleton)]
#[case(DependencyType::After("${job_id}".to_string()))]
#[case(DependencyType::AfterTimeDelay("${job_id}".to_string(), "10".to_string()))]
#[case(DependencyType::AfterAny("${job_id}".to_string()))]
#[case(DependencyType::AfterBurstBuffer("${job_id}".to_string()))]
#[case(DependencyType::AfterCorr("${job_id}".to_string()))]
#[case(DependencyType::AfterNotOk("${job_id}".to_string()))]
#[case(DependencyType::AfterOk("${job_id}".to_string()))]
fn test_dependency_type_validate_is_ok(#[case] dependency: DependencyType) {
    assert!(dependency.validate().is_ok());
}

#[rstest]
#[case(DependencyType::After("".to_string()))]
#[case(DependencyType::AfterTimeDelay("".to_string(), "10".to_string()))]
#[case(DependencyType::AfterTimeDelay("10".to_string(), "".to_string()))]
#[case(DependencyType::AfterAny("".to_string()))]
#[case(DependencyType::AfterBurstBuffer("".to_string()))]
#[case(DependencyType::AfterCorr("".to_string()))]
#[case(DependencyType::AfterNotOk("".to_string()))]
#[case(DependencyType::AfterOk("".to_string()))]
#[case(DependencyType::After("   ".to_string()))]
#[case(DependencyType::AfterTimeDelay("   ".to_string(), "10".to_string()))]
#[case(DependencyType::AfterTimeDelay("10".to_string(), "   ".to_string()))]
#[case(DependencyType::AfterAny("   ".to_string()))]
#[case(DependencyType::AfterBurstBuffer("   ".to_string()))]
#[case(DependencyType::AfterCorr("   ".to_string()))]
#[case(DependencyType::AfterNotOk("   ".to_string()))]
#[case(DependencyType::AfterOk("   ".to_string()))]
#[case(DependencyType::After("123 ".to_string()))]
#[case(DependencyType::AfterTimeDelay("123 ".to_string(), "10".to_string()))]
#[case(DependencyType::AfterTimeDelay("10".to_string(), "10 ".to_string()))]
#[case(DependencyType::AfterAny("123 ".to_string()))]
#[case(DependencyType::AfterBurstBuffer("123 ".to_string()))]
#[case(DependencyType::AfterCorr("123 ".to_string()))]
#[case(DependencyType::AfterNotOk("123 ".to_string()))]
#[case(DependencyType::AfterOk("123 ".to_string()))]
#[case(DependencyType::After(" 123".to_string()))]
#[case(DependencyType::AfterTimeDelay(" 123".to_string(), "10".to_string()))]
#[case(DependencyType::AfterTimeDelay("10".to_string(), " 10".to_string()))]
#[case(DependencyType::AfterAny(" 123".to_string()))]
#[case(DependencyType::AfterBurstBuffer(" 123".to_string()))]
#[case(DependencyType::AfterCorr(" 123".to_string()))]
#[case(DependencyType::AfterNotOk(" 123".to_string()))]
#[case(DependencyType::AfterOk(" 123".to_string()))]
fn test_dependency_type_validate_is_err(#[case] dependency: DependencyType) {
    assert!(dependency.validate().is_err());
}
